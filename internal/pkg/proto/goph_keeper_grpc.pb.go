// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: proto/goph_keeper.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GophKeeper_Register_FullMethodName            = "/goph_keeper.GophKeeper/Register"
	GophKeeper_Login_FullMethodName               = "/goph_keeper.GophKeeper/Login"
	GophKeeper_AddLoginPassword_FullMethodName    = "/goph_keeper.GophKeeper/AddLoginPassword"
	GophKeeper_GetLoginPassword_FullMethodName    = "/goph_keeper.GophKeeper/GetLoginPassword"
	GophKeeper_DeleteLoginPassword_FullMethodName = "/goph_keeper.GophKeeper/DeleteLoginPassword"
	GophKeeper_AddCard_FullMethodName             = "/goph_keeper.GophKeeper/AddCard"
	GophKeeper_GetCard_FullMethodName             = "/goph_keeper.GophKeeper/GetCard"
	GophKeeper_DeleteCard_FullMethodName          = "/goph_keeper.GophKeeper/DeleteCard"
	GophKeeper_AddText_FullMethodName             = "/goph_keeper.GophKeeper/AddText"
	GophKeeper_GetText_FullMethodName             = "/goph_keeper.GophKeeper/GetText"
	GophKeeper_DeleteText_FullMethodName          = "/goph_keeper.GophKeeper/DeleteText"
	GophKeeper_AddBinary_FullMethodName           = "/goph_keeper.GophKeeper/AddBinary"
	GophKeeper_GetBinary_FullMethodName           = "/goph_keeper.GophKeeper/GetBinary"
	GophKeeper_DeleteBinary_FullMethodName        = "/goph_keeper.GophKeeper/DeleteBinary"
)

// GophKeeperClient is the client API for GophKeeper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GophKeeperClient interface {
	Register(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*LoginResult, error)
	Login(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*LoginResult, error)
	AddLoginPassword(ctx context.Context, in *LoginPassword, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetLoginPassword(ctx context.Context, in *Key, opts ...grpc.CallOption) (*LoginPassword, error)
	DeleteLoginPassword(ctx context.Context, in *Key, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddCard(ctx context.Context, in *CardDetails, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCard(ctx context.Context, in *Key, opts ...grpc.CallOption) (*CardDetails, error)
	DeleteCard(ctx context.Context, in *Key, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddText(ctx context.Context, opts ...grpc.CallOption) (GophKeeper_AddTextClient, error)
	GetText(ctx context.Context, in *Key, opts ...grpc.CallOption) (GophKeeper_GetTextClient, error)
	DeleteText(ctx context.Context, in *Key, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddBinary(ctx context.Context, opts ...grpc.CallOption) (GophKeeper_AddBinaryClient, error)
	GetBinary(ctx context.Context, in *Key, opts ...grpc.CallOption) (GophKeeper_GetBinaryClient, error)
	DeleteBinary(ctx context.Context, in *Key, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type gophKeeperClient struct {
	cc grpc.ClientConnInterface
}

func NewGophKeeperClient(cc grpc.ClientConnInterface) GophKeeperClient {
	return &gophKeeperClient{cc}
}

func (c *gophKeeperClient) Register(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*LoginResult, error) {
	out := new(LoginResult)
	err := c.cc.Invoke(ctx, GophKeeper_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) Login(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*LoginResult, error) {
	out := new(LoginResult)
	err := c.cc.Invoke(ctx, GophKeeper_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) AddLoginPassword(ctx context.Context, in *LoginPassword, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GophKeeper_AddLoginPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) GetLoginPassword(ctx context.Context, in *Key, opts ...grpc.CallOption) (*LoginPassword, error) {
	out := new(LoginPassword)
	err := c.cc.Invoke(ctx, GophKeeper_GetLoginPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) DeleteLoginPassword(ctx context.Context, in *Key, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GophKeeper_DeleteLoginPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) AddCard(ctx context.Context, in *CardDetails, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GophKeeper_AddCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) GetCard(ctx context.Context, in *Key, opts ...grpc.CallOption) (*CardDetails, error) {
	out := new(CardDetails)
	err := c.cc.Invoke(ctx, GophKeeper_GetCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) DeleteCard(ctx context.Context, in *Key, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GophKeeper_DeleteCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) AddText(ctx context.Context, opts ...grpc.CallOption) (GophKeeper_AddTextClient, error) {
	stream, err := c.cc.NewStream(ctx, &GophKeeper_ServiceDesc.Streams[0], GophKeeper_AddText_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gophKeeperAddTextClient{stream}
	return x, nil
}

type GophKeeper_AddTextClient interface {
	Send(*Text) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type gophKeeperAddTextClient struct {
	grpc.ClientStream
}

func (x *gophKeeperAddTextClient) Send(m *Text) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gophKeeperAddTextClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gophKeeperClient) GetText(ctx context.Context, in *Key, opts ...grpc.CallOption) (GophKeeper_GetTextClient, error) {
	stream, err := c.cc.NewStream(ctx, &GophKeeper_ServiceDesc.Streams[1], GophKeeper_GetText_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gophKeeperGetTextClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GophKeeper_GetTextClient interface {
	Recv() (*Text, error)
	grpc.ClientStream
}

type gophKeeperGetTextClient struct {
	grpc.ClientStream
}

func (x *gophKeeperGetTextClient) Recv() (*Text, error) {
	m := new(Text)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gophKeeperClient) DeleteText(ctx context.Context, in *Key, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GophKeeper_DeleteText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperClient) AddBinary(ctx context.Context, opts ...grpc.CallOption) (GophKeeper_AddBinaryClient, error) {
	stream, err := c.cc.NewStream(ctx, &GophKeeper_ServiceDesc.Streams[2], GophKeeper_AddBinary_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gophKeeperAddBinaryClient{stream}
	return x, nil
}

type GophKeeper_AddBinaryClient interface {
	Send(*Binary) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type gophKeeperAddBinaryClient struct {
	grpc.ClientStream
}

func (x *gophKeeperAddBinaryClient) Send(m *Binary) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gophKeeperAddBinaryClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gophKeeperClient) GetBinary(ctx context.Context, in *Key, opts ...grpc.CallOption) (GophKeeper_GetBinaryClient, error) {
	stream, err := c.cc.NewStream(ctx, &GophKeeper_ServiceDesc.Streams[3], GophKeeper_GetBinary_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gophKeeperGetBinaryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GophKeeper_GetBinaryClient interface {
	Recv() (*Binary, error)
	grpc.ClientStream
}

type gophKeeperGetBinaryClient struct {
	grpc.ClientStream
}

func (x *gophKeeperGetBinaryClient) Recv() (*Binary, error) {
	m := new(Binary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gophKeeperClient) DeleteBinary(ctx context.Context, in *Key, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GophKeeper_DeleteBinary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GophKeeperServer is the server API for GophKeeper service.
// All implementations must embed UnimplementedGophKeeperServer
// for forward compatibility
type GophKeeperServer interface {
	Register(context.Context, *UserData) (*LoginResult, error)
	Login(context.Context, *UserData) (*LoginResult, error)
	AddLoginPassword(context.Context, *LoginPassword) (*emptypb.Empty, error)
	GetLoginPassword(context.Context, *Key) (*LoginPassword, error)
	DeleteLoginPassword(context.Context, *Key) (*emptypb.Empty, error)
	AddCard(context.Context, *CardDetails) (*emptypb.Empty, error)
	GetCard(context.Context, *Key) (*CardDetails, error)
	DeleteCard(context.Context, *Key) (*emptypb.Empty, error)
	AddText(GophKeeper_AddTextServer) error
	GetText(*Key, GophKeeper_GetTextServer) error
	DeleteText(context.Context, *Key) (*emptypb.Empty, error)
	AddBinary(GophKeeper_AddBinaryServer) error
	GetBinary(*Key, GophKeeper_GetBinaryServer) error
	DeleteBinary(context.Context, *Key) (*emptypb.Empty, error)
	mustEmbedUnimplementedGophKeeperServer()
}

// UnimplementedGophKeeperServer must be embedded to have forward compatible implementations.
type UnimplementedGophKeeperServer struct {
}

func (UnimplementedGophKeeperServer) Register(context.Context, *UserData) (*LoginResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedGophKeeperServer) Login(context.Context, *UserData) (*LoginResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedGophKeeperServer) AddLoginPassword(context.Context, *LoginPassword) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLoginPassword not implemented")
}
func (UnimplementedGophKeeperServer) GetLoginPassword(context.Context, *Key) (*LoginPassword, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginPassword not implemented")
}
func (UnimplementedGophKeeperServer) DeleteLoginPassword(context.Context, *Key) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLoginPassword not implemented")
}
func (UnimplementedGophKeeperServer) AddCard(context.Context, *CardDetails) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCard not implemented")
}
func (UnimplementedGophKeeperServer) GetCard(context.Context, *Key) (*CardDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCard not implemented")
}
func (UnimplementedGophKeeperServer) DeleteCard(context.Context, *Key) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCard not implemented")
}
func (UnimplementedGophKeeperServer) AddText(GophKeeper_AddTextServer) error {
	return status.Errorf(codes.Unimplemented, "method AddText not implemented")
}
func (UnimplementedGophKeeperServer) GetText(*Key, GophKeeper_GetTextServer) error {
	return status.Errorf(codes.Unimplemented, "method GetText not implemented")
}
func (UnimplementedGophKeeperServer) DeleteText(context.Context, *Key) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteText not implemented")
}
func (UnimplementedGophKeeperServer) AddBinary(GophKeeper_AddBinaryServer) error {
	return status.Errorf(codes.Unimplemented, "method AddBinary not implemented")
}
func (UnimplementedGophKeeperServer) GetBinary(*Key, GophKeeper_GetBinaryServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBinary not implemented")
}
func (UnimplementedGophKeeperServer) DeleteBinary(context.Context, *Key) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBinary not implemented")
}
func (UnimplementedGophKeeperServer) mustEmbedUnimplementedGophKeeperServer() {}

// UnsafeGophKeeperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GophKeeperServer will
// result in compilation errors.
type UnsafeGophKeeperServer interface {
	mustEmbedUnimplementedGophKeeperServer()
}

func RegisterGophKeeperServer(s grpc.ServiceRegistrar, srv GophKeeperServer) {
	s.RegisterService(&GophKeeper_ServiceDesc, srv)
}

func _GophKeeper_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).Register(ctx, req.(*UserData))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).Login(ctx, req.(*UserData))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_AddLoginPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).AddLoginPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_AddLoginPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).AddLoginPassword(ctx, req.(*LoginPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_GetLoginPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).GetLoginPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_GetLoginPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).GetLoginPassword(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_DeleteLoginPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).DeleteLoginPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_DeleteLoginPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).DeleteLoginPassword(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_AddCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).AddCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_AddCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).AddCard(ctx, req.(*CardDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_GetCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).GetCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_GetCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).GetCard(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_DeleteCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).DeleteCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_DeleteCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).DeleteCard(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_AddText_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GophKeeperServer).AddText(&gophKeeperAddTextServer{stream})
}

type GophKeeper_AddTextServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*Text, error)
	grpc.ServerStream
}

type gophKeeperAddTextServer struct {
	grpc.ServerStream
}

func (x *gophKeeperAddTextServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gophKeeperAddTextServer) Recv() (*Text, error) {
	m := new(Text)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GophKeeper_GetText_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Key)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GophKeeperServer).GetText(m, &gophKeeperGetTextServer{stream})
}

type GophKeeper_GetTextServer interface {
	Send(*Text) error
	grpc.ServerStream
}

type gophKeeperGetTextServer struct {
	grpc.ServerStream
}

func (x *gophKeeperGetTextServer) Send(m *Text) error {
	return x.ServerStream.SendMsg(m)
}

func _GophKeeper_DeleteText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).DeleteText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_DeleteText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).DeleteText(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeper_AddBinary_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GophKeeperServer).AddBinary(&gophKeeperAddBinaryServer{stream})
}

type GophKeeper_AddBinaryServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*Binary, error)
	grpc.ServerStream
}

type gophKeeperAddBinaryServer struct {
	grpc.ServerStream
}

func (x *gophKeeperAddBinaryServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gophKeeperAddBinaryServer) Recv() (*Binary, error) {
	m := new(Binary)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GophKeeper_GetBinary_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Key)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GophKeeperServer).GetBinary(m, &gophKeeperGetBinaryServer{stream})
}

type GophKeeper_GetBinaryServer interface {
	Send(*Binary) error
	grpc.ServerStream
}

type gophKeeperGetBinaryServer struct {
	grpc.ServerStream
}

func (x *gophKeeperGetBinaryServer) Send(m *Binary) error {
	return x.ServerStream.SendMsg(m)
}

func _GophKeeper_DeleteBinary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServer).DeleteBinary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeper_DeleteBinary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServer).DeleteBinary(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

// GophKeeper_ServiceDesc is the grpc.ServiceDesc for GophKeeper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GophKeeper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goph_keeper.GophKeeper",
	HandlerType: (*GophKeeperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _GophKeeper_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _GophKeeper_Login_Handler,
		},
		{
			MethodName: "AddLoginPassword",
			Handler:    _GophKeeper_AddLoginPassword_Handler,
		},
		{
			MethodName: "GetLoginPassword",
			Handler:    _GophKeeper_GetLoginPassword_Handler,
		},
		{
			MethodName: "DeleteLoginPassword",
			Handler:    _GophKeeper_DeleteLoginPassword_Handler,
		},
		{
			MethodName: "AddCard",
			Handler:    _GophKeeper_AddCard_Handler,
		},
		{
			MethodName: "GetCard",
			Handler:    _GophKeeper_GetCard_Handler,
		},
		{
			MethodName: "DeleteCard",
			Handler:    _GophKeeper_DeleteCard_Handler,
		},
		{
			MethodName: "DeleteText",
			Handler:    _GophKeeper_DeleteText_Handler,
		},
		{
			MethodName: "DeleteBinary",
			Handler:    _GophKeeper_DeleteBinary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddText",
			Handler:       _GophKeeper_AddText_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetText",
			Handler:       _GophKeeper_GetText_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddBinary",
			Handler:       _GophKeeper_AddBinary_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetBinary",
			Handler:       _GophKeeper_GetBinary_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/goph_keeper.proto",
}
