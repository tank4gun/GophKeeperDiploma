// Code generated by MockGen. DO NOT EDIT.
// Source: GophKeeperDiploma/internal/server/storage (interfaces: IRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	console "GophKeeperDiploma/internal/client/console"
	storage "GophKeeperDiploma/internal/server/storage"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	status 	"google.golang.org/grpc/status"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// AddBinary mocks base method.
func (m *MockIRepository) AddBinary(arg0 uuid.UUID, arg1, arg2, arg3 string) *status.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBinary", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*status.Status)
	return ret0
}

// AddBinary indicates an expected call of AddBinary.
func (mr *MockIRepositoryMockRecorder) AddBinary(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBinary", reflect.TypeOf((*MockIRepository)(nil).AddBinary), arg0, arg1, arg2, arg3)
}

// AddCard mocks base method.
func (m *MockIRepository) AddCard(arg0 uuid.UUID, arg1, arg2, arg3, arg4, arg5, arg6, arg7 string) *status.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCard", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(*status.Status)
	return ret0
}

// AddCard indicates an expected call of AddCard.
func (mr *MockIRepositoryMockRecorder) AddCard(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCard", reflect.TypeOf((*MockIRepository)(nil).AddCard), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// AddClient mocks base method.
func (m *MockIRepository) AddClient(arg0, arg1 string) *status.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClient", arg0, arg1)
	ret0, _ := ret[0].(*status.Status)
	return ret0
}

// AddClient indicates an expected call of AddClient.
func (mr *MockIRepositoryMockRecorder) AddClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClient", reflect.TypeOf((*MockIRepository)(nil).AddClient), arg0, arg1)
}

// AddLoginPassword mocks base method.
func (m *MockIRepository) AddLoginPassword(arg0 uuid.UUID, arg1, arg2, arg3, arg4 string) *status.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLoginPassword", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*status.Status)
	return ret0
}

// AddLoginPassword indicates an expected call of AddLoginPassword.
func (mr *MockIRepositoryMockRecorder) AddLoginPassword(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLoginPassword", reflect.TypeOf((*MockIRepository)(nil).AddLoginPassword), arg0, arg1, arg2, arg3, arg4)
}

// AddText mocks base method.
func (m *MockIRepository) AddText(arg0 uuid.UUID, arg1, arg2, arg3 string) *status.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddText", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*status.Status)
	return ret0
}

// AddText indicates an expected call of AddText.
func (mr *MockIRepositoryMockRecorder) AddText(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddText", reflect.TypeOf((*MockIRepository)(nil).AddText), arg0, arg1, arg2, arg3)
}

// DeleteBinary mocks base method.
func (m *MockIRepository) DeleteBinary(arg0 uuid.UUID, arg1 string) *status.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBinary", arg0, arg1)
	ret0, _ := ret[0].(*status.Status)
	return ret0
}

// DeleteBinary indicates an expected call of DeleteBinary.
func (mr *MockIRepositoryMockRecorder) DeleteBinary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBinary", reflect.TypeOf((*MockIRepository)(nil).DeleteBinary), arg0, arg1)
}

// DeleteCard mocks base method.
func (m *MockIRepository) DeleteCard(arg0 uuid.UUID, arg1 string) *status.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCard", arg0, arg1)
	ret0, _ := ret[0].(*status.Status)
	return ret0
}

// DeleteCard indicates an expected call of DeleteCard.
func (mr *MockIRepositoryMockRecorder) DeleteCard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCard", reflect.TypeOf((*MockIRepository)(nil).DeleteCard), arg0, arg1)
}

// DeleteLoginPassword mocks base method.
func (m *MockIRepository) DeleteLoginPassword(arg0 uuid.UUID, arg1 string) *status.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoginPassword", arg0, arg1)
	ret0, _ := ret[0].(*status.Status)
	return ret0
}

// DeleteLoginPassword indicates an expected call of DeleteLoginPassword.
func (mr *MockIRepositoryMockRecorder) DeleteLoginPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoginPassword", reflect.TypeOf((*MockIRepository)(nil).DeleteLoginPassword), arg0, arg1)
}

// DeleteText mocks base method.
func (m *MockIRepository) DeleteText(arg0 uuid.UUID, arg1 string) *status.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteText", arg0, arg1)
	ret0, _ := ret[0].(*status.Status)
	return ret0
}

// DeleteText indicates an expected call of DeleteText.
func (mr *MockIRepositoryMockRecorder) DeleteText(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteText", reflect.TypeOf((*MockIRepository)(nil).DeleteText), arg0, arg1)
}

// GetBinary mocks base method.
func (m *MockIRepository) GetBinary(arg0 uuid.UUID, arg1 string) (console.Bytes, *status.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBinary", arg0, arg1)
	ret0, _ := ret[0].(console.Bytes)
	ret1, _ := ret[1].(*status.Status)
	return ret0, ret1
}

// GetBinary indicates an expected call of GetBinary.
func (mr *MockIRepositoryMockRecorder) GetBinary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBinary", reflect.TypeOf((*MockIRepository)(nil).GetBinary), arg0, arg1)
}

// GetCard mocks base method.
func (m *MockIRepository) GetCard(arg0 uuid.UUID, arg1 string) (console.Card, *status.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCard", arg0, arg1)
	ret0, _ := ret[0].(console.Card)
	ret1, _ := ret[1].(*status.Status)
	return ret0, ret1
}

// GetCard indicates an expected call of GetCard.
func (mr *MockIRepositoryMockRecorder) GetCard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCard", reflect.TypeOf((*MockIRepository)(nil).GetCard), arg0, arg1)
}

// GetClientByLogin mocks base method.
func (m *MockIRepository) GetClientByLogin(arg0 string) (storage.Client, *status.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientByLogin", arg0)
	ret0, _ := ret[0].(storage.Client)
	ret1, _ := ret[1].(*status.Status)
	return ret0, ret1
}

// GetClientByLogin indicates an expected call of GetClientByLogin.
func (mr *MockIRepositoryMockRecorder) GetClientByLogin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientByLogin", reflect.TypeOf((*MockIRepository)(nil).GetClientByLogin), arg0)
}

// GetLoginPassword mocks base method.
func (m *MockIRepository) GetLoginPassword(arg0 uuid.UUID, arg1 string) (console.LoginPass, *status.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoginPassword", arg0, arg1)
	ret0, _ := ret[0].(console.LoginPass)
	ret1, _ := ret[1].(*status.Status)
	return ret0, ret1
}

// GetLoginPassword indicates an expected call of GetLoginPassword.
func (mr *MockIRepositoryMockRecorder) GetLoginPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginPassword", reflect.TypeOf((*MockIRepository)(nil).GetLoginPassword), arg0, arg1)
}

// GetText mocks base method.
func (m *MockIRepository) GetText(arg0 uuid.UUID, arg1 string) (console.Text, *status.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetText", arg0, arg1)
	ret0, _ := ret[0].(console.Text)
	ret1, _ := ret[1].(*status.Status)
	return ret0, ret1
}

// GetText indicates an expected call of GetText.
func (mr *MockIRepositoryMockRecorder) GetText(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetText", reflect.TypeOf((*MockIRepository)(nil).GetText), arg0, arg1)
}

// Shutdown mocks base method.
func (m *MockIRepository) Shutdown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockIRepositoryMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockIRepository)(nil).Shutdown))
}

// UpdateBinary mocks base method.
func (m *MockIRepository) UpdateBinary(arg0 uuid.UUID, arg1, arg2, arg3 string) *status.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBinary", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*status.Status)
	return ret0
}

// UpdateBinary indicates an expected call of UpdateBinary.
func (mr *MockIRepositoryMockRecorder) UpdateBinary(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBinary", reflect.TypeOf((*MockIRepository)(nil).UpdateBinary), arg0, arg1, arg2, arg3)
}

// UpdateCard mocks base method.
func (m *MockIRepository) UpdateCard(arg0 uuid.UUID, arg1, arg2, arg3, arg4, arg5, arg6, arg7 string) *status.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCard", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(*status.Status)
	return ret0
}

// UpdateCard indicates an expected call of UpdateCard.
func (mr *MockIRepositoryMockRecorder) UpdateCard(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCard", reflect.TypeOf((*MockIRepository)(nil).UpdateCard), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// UpdateLoginPassword mocks base method.
func (m *MockIRepository) UpdateLoginPassword(arg0 uuid.UUID, arg1, arg2, arg3, arg4 string) *status.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoginPassword", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*status.Status)
	return ret0
}

// UpdateLoginPassword indicates an expected call of UpdateLoginPassword.
func (mr *MockIRepositoryMockRecorder) UpdateLoginPassword(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoginPassword", reflect.TypeOf((*MockIRepository)(nil).UpdateLoginPassword), arg0, arg1, arg2, arg3, arg4)
}

// UpdateText mocks base method.
func (m *MockIRepository) UpdateText(arg0 uuid.UUID, arg1, arg2, arg3 string) *status.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateText", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*status.Status)
	return ret0
}

// UpdateText indicates an expected call of UpdateText.
func (mr *MockIRepositoryMockRecorder) UpdateText(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateText", reflect.TypeOf((*MockIRepository)(nil).UpdateText), arg0, arg1, arg2, arg3)
}
